version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: crawl_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-crawl_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crawl_password}
      POSTGRES_DB: ${POSTGRES_DB:-crawl_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "${HOST_POSTGRES_PORT:-5433}:5432"
    volumes:
      - ${POSTGRES_DATA_PATH:-postgres_data}:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crawl_user -d crawl_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - crawl_network

  pgbouncer:
    build:
      context: ./pgbouncer
    container_name: crawl_pgbouncer
    restart: unless-stopped
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-crawl_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-crawl_password}
      POSTGRES_DB: ${POSTGRES_DB:-crawl_db}
      PGBOUNCER_PORT: ${PGBOUNCER_PORT:-6432}
      PGBOUNCER_POOL_MODE: ${PGBOUNCER_POOL_MODE:-transaction}
      PGBOUNCER_MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN:-200}
      PGBOUNCER_DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE:-20}
      PGBOUNCER_RESERVE_POOL_SIZE: ${PGBOUNCER_RESERVE_POOL_SIZE:-5}
      PGBOUNCER_RESERVE_POOL_TIMEOUT: ${PGBOUNCER_RESERVE_POOL_TIMEOUT:-5}
      PGBOUNCER_SERVER_LIFETIME: ${PGBOUNCER_SERVER_LIFETIME:-900}
      PGBOUNCER_SERVER_IDLE_TIMEOUT: ${PGBOUNCER_SERVER_IDLE_TIMEOUT:-300}
      PGBOUNCER_STATS_PERIOD: ${PGBOUNCER_STATS_PERIOD:-60}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${HOST_PGBOUNCER_PORT:-6432}:6432"
    volumes:
      - pgbouncer_logs:/var/log/pgbouncer
    networks:
      - crawl_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -p 6432 -U ${POSTGRES_USER:-crawl_user} -d ${POSTGRES_DB:-crawl_db}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: crawl_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - crawl_network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: crawl_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-crawler}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-crawler_password}
    ports:
      - "${HOST_RABBITMQ_PORT:-5672}:5672"
      - "${HOST_RABBITMQ_MGMT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - crawl_network

  test_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crawl_test_app
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://crawl_user:crawl_password@pgbouncer:6432/crawl_db}
      DATABASE_URL_DIRECT: ${DATABASE_URL_DIRECT:-postgresql://crawl_user:crawl_password@postgres:5432/crawl_db}
      CRAWLER_DATABASE_URL: ${CRAWLER_DATABASE_URL:-postgresql://crawl_user:crawl_password@pgbouncer:6432/crawl_db}
      CRAWLER_DATABASE_URL_DIRECT: ${CRAWLER_DATABASE_URL_DIRECT:-postgresql://crawl_user:crawl_password@postgres:5432/crawl_db}
      CRAWLER_CELERY_BROKER_URL: ${CRAWLER_CELERY_BROKER_URL:-amqp://crawler:crawler_password@rabbitmq:5672//}
      CRAWLER_CELERY_RESULT_BACKEND: ${CRAWLER_CELERY_RESULT_BACKEND:-db+postgresql://crawl_user:crawl_password@pgbouncer:6432/crawl_db}
      CRAWLER_CELERY_RESULT_BACKEND_DIRECT: ${CRAWLER_CELERY_RESULT_BACKEND_DIRECT:-db+postgresql://crawl_user:crawl_password@postgres:5432/crawl_db}
      CRAWLER_CELERY_TASK_ALWAYS_EAGER: ${CRAWLER_CELERY_TASK_ALWAYS_EAGER:-False}
    depends_on:
      postgres:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./:/app
      - ${TEST_APP_STORAGE_MOUNT_PATH:-./storage}:/app/storage
      - ${TEST_APP_DATA_MOUNT_PATH:-./data}:/app/data
    command: python test_models.py
    networks:
      - crawl_network

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crawl_flower
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://crawl_user:crawl_password@pgbouncer:6432/crawl_db}
      DATABASE_URL_DIRECT: ${DATABASE_URL_DIRECT:-postgresql://crawl_user:crawl_password@postgres:5432/crawl_db}
      CRAWLER_DATABASE_URL: ${CRAWLER_DATABASE_URL:-postgresql://crawl_user:crawl_password@pgbouncer:6432/crawl_db}
      CRAWLER_DATABASE_URL_DIRECT: ${CRAWLER_DATABASE_URL_DIRECT:-postgresql://crawl_user:crawl_password@postgres:5432/crawl_db}
      CRAWLER_CELERY_BROKER_URL: ${CRAWLER_CELERY_BROKER_URL:-amqp://crawler:crawler_password@rabbitmq:5672//}
      CRAWLER_CELERY_RESULT_BACKEND: ${CRAWLER_CELERY_RESULT_BACKEND:-db+postgresql://crawl_user:crawl_password@pgbouncer:6432/crawl_db}
      CRAWLER_CELERY_RESULT_BACKEND_DIRECT: ${CRAWLER_CELERY_RESULT_BACKEND_DIRECT:-db+postgresql://crawl_user:crawl_password@postgres:5432/crawl_db}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    command: >
      celery --app crawler.celery_app flower
        --address=0.0.0.0
        --port=5555
    networks:
      - crawl_network

volumes:
  postgres_data:
  pgadmin_data:
  rabbitmq_data:
  pgbouncer_logs:

networks:
  crawl_network:
    driver: bridge
